[{"filePath":"/home/will/repos/team-finder-ui/src/Context.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/Routes.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/components/Button.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/components/PageContainer.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/components/PageHeader.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/components/PageNavigator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Router' is defined but never used.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Route' is defined but never used.","line":2,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used.","line":2,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":46}],"errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { BrowserRouter as Router, Route, Link, NavLink } from \"react-router-dom\";\n\nexport const PageNavigator: React.FC = () => (\n  <div className=\"flex flex-row justify-center items-center my-8\">\n    <NavLink\n      to=\"/\"\n      exact={true}\n      activeClassName=\"text-primary font-medium underline hover:no-underline\"\n      className=\"text-2xl font-light text-white text-center mx-16 uppercase whitespace-pre hover:underline\">\n      Find<br />Team\n    </NavLink>\n\n    <NavLink\n      to=\"/register\"\n      activeClassName=\"text-primary font-medium underline hover:no-underline\"\n      className=\"text-2xl font-light text-white text-center mx-16 uppercase whitespace-pre hover:underline\">\n      Post / Edit<br />Your Team\n    </NavLink>\n  </div>\n);\n\n","usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/components/PageUserInfo.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":11,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":33}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { UserInfo } from \"../utils/UserInfo\";\n\n\nlet userInfo: UserInfo = {avatar: undefined, username: undefined};\nlet storedUserData = null;\n\n\n// TODO: Handle data not present/malformed\nexport function isUserLoggedIn() {\n  return (localStorage.getItem(\"userData\") != null);\n}\n\nexport const PageUserInfo: React.FC = () => (\n  <div className=\"text-center\">\n    { isUserLoggedIn() ? (\n        storedUserData = localStorage.getItem(\"userData\"),\n        userInfo = JSON.parse(storedUserData || '{}'),\n        <LoggedInUserInfoPanel avatar={userInfo.avatar} username={userInfo.username} />\n      ) : (\n        <LoggedOutUserInfoPanel />\n      )\n    }\n  </div>\n);\n\nconst LoggedInUserInfoPanel: React.FC<UserInfo> = ({avatar, username}) => (\n  <div className=\"inline-flex flex-row justify-center items-center p-6 border\">\n    <img style={{height: \"90px\", width: \"90px\"}} className=\"object-cover rounded-full ring-4 ring-primary\" src={avatar} />\n    <div className=\"flex flex-col justify-center\">\n      <div className=\"flex flex-row mb-2\">\n        <h1 className=\"text-white font-bold text-lg text-left mx-6\">\n          {username}\n        </h1>\n        <NavLink to=\"/logout\" className=\"text-white text-right ml-6 hover:underline hover:cursor-pointer\">Log Out</NavLink>\n      </div>\n      <h1 className=\"text-white text-center mx-6\">Team Status:</h1>\n      <h1 className=\"text-white text-center mx-6\">No Team Registered</h1>\n    </div>\n  </div>\n)\n\nconst LoggedOutUserInfoPanel: React.FC = () => (\n  <>\n    <a href={`${import.meta.env.VITE_API_URL}/oauth2/authorization/discord`} className=\"inline-block text-white text-3xl mt-8 mb-2 w-auto hover:underline\">Log In{\"\\n\"}With Discord</a>\n    <div className=\"text-white\">if you want to register a Team</div>\n  </>\n)\n","usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/components/SkillsetSVG.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/components/SkillsetSelector.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/components/Team.tsx","messages":[{"ruleId":"react/jsx-no-target-blank","severity":2,"message":"Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","line":45,"column":9,"nodeType":"JSXOpeningElement","messageId":"noTargetBlank","endLine":45,"endColumn":83,"fix":{"range":[1550,1550],"text":" rel=\"noreferrer\""}},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":47,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts"}],"errorCount":2,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React from \"react\";\nimport TimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en\"\n\nimport { getSkillsets, Skillset } from \"../utils/Skillsets\";\nimport {SkillsetSVG} from \"./SkillsetSVG\";\n\n// Use English time\nTimeAgo.addDefaultLocale(en)\n\n// Create formatter (English).\nconst timeAgo = new TimeAgo('en-GB')\n\nexport class TeamData {\n  author: string;\n  authorId: string;\n  description: string;\n  skills: Array<Skillset>;\n  createdAt: Date;\n  id: number;\n  constructor(teamJSON: Record<string, unknown>){\n    this.author = teamJSON.author as string;\n    this.authorId = teamJSON.authorId as string;\n    this.description = teamJSON.description as string;\n\n    const createdAt = teamJSON.createdAt as string;\n    this.createdAt = new Date(createdAt);\n    // Safari can't handle YYYY-mm-dd HH:MM:ss, but it _can_ handle YYYY-mm-ddTHH:MM:ss\n    if (isNaN(this.createdAt.getTime())) {\n      this.createdAt = new Date(createdAt.replace(\" \", \"T\"))\n    }\n\n    this.skills = getSkillsets(teamJSON.skillsetMask as number);\n    this.id = teamJSON.id as number;\n  }\n}\n\nexport const Team: React.FC<{team:TeamData}> = ({team}) => {\n\n  const skillstr = team.skills.map(r => <SkillsetSVG skillsetId={r.id} key={r.id} className=\"w-7 fill-primary inline-block m-1 align-top\"/>);\n\n  return (\n    <div data-team-id={team.id} className=\"my-8 p-5 border relative\">\n      <div className=\"absolute -top-2.5 left-1 px-3 bg-black leading-none font-bold text-lg\">\n        <a href={`https://discordapp.com/users/${team.authorId}`} target=\"_blank\">\n          <span className=\"pb-1 border-b-2 border-white\" style={{borderBottomWidth: \"1px\"}}>\n            ðŸ”— {team.author}'s Team\n          </span>\n        </a>\n      </div>\n      <div className=\"flex justify-between\">\n        <div className=\"mr-5 text-lg\">{team.description}</div>\n        <div>\n          <div className=\"mb-1\">ðŸ•“ {timeAgo.format(team.createdAt)}</div>\n          <div className=\"text-lg w-36\">ðŸ”Ž {skillstr}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/env.d.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/main.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/pages/Errors/LoginFailure.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/pages/Errors/NotFound.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/pages/Home/Home.tsx","messages":[{"ruleId":"@typescript-eslint/no-extra-semi","severity":2,"message":"Unnecessary semicolon.","line":8,"column":50,"nodeType":"EmptyStatement","messageId":"unexpected","endLine":8,"endColumn":51,"fix":{"range":[369,377],"text":"}\nconst"}}],"errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { PageHeader } from \"../../components/PageHeader\";\nimport { TeamData, Team } from \"../../components/Team\";\nimport { SkillsetSelector } from \"../../components/SkillsetSelector\";\nimport { getAllTeams } from \"../../utils/TeamActions\";\n\ninterface TLprops { selectedSkillsets: number[] };\nconst TeamList: React.FC<TLprops> = ({selectedSkillsets}) => {\n  const skillsetMask = selectedSkillsets.length\n    ? selectedSkillsets.reduce((a, b) => a + b, 0)\n    : null;\n\n  const { isLoading, isError, data, refetch } = useQuery([\"Teams\", skillsetMask],\n    async (): Promise<Array<TeamData>> => {\n      return ( await getAllTeams({skillsetMask}) ).map((t) => new TeamData(t));\n    },\n    {\n      keepPreviousData: true,\n    }\n  );\n\n  return (\n    <div>\n      <button\n        onClick={() => refetch()}\n        className=\"block bg-primary-dark my-6 p-2 focus:outline-none\"\n      >\n        Find A Team!\n      </button>\n\n      <div>\n        {!data && isLoading\n          ? \"Loading..\"\n          : isError\n          ? \"Sorry, something went wrong. Please try again in a few minutes.\"\n          : data!.map((t) => <Team key={t.id} team={t} />)}\n      </div>\n    </div>\n  );\n};\n\nexport const Home: React.FC = () => {\n  const [selectedSkillsets, setSelectedSkillsets] = useState<number[]>([]);\n\n  return (<>\n    <PageHeader>\n      Filter by what skills you can give:\n    </PageHeader>\n    <SkillsetSelector\n      selectedSkillsets={selectedSkillsets}\n      onChange={setSelectedSkillsets}\n    />\n    <TeamList selectedSkillsets={selectedSkillsets} />\n  </>);\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/pages/Login/AuthorizedCallback.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/pages/Login/Login.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/pages/Login/Logout.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/pages/Register/Register.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isUserLoggedIn' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":24},{"ruleId":"prefer-const","severity":2,"message":"'waitForBarAnim' is never reassigned. Use 'const' instead.","line":40,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":40,"endColumn":25,"fix":{"range":[1565,1635],"text":"const waitForBarAnim = new Promise(resolve => setTimeout(resolve, 200));"}},{"ruleId":"prefer-const","severity":2,"message":"'charRemain' is never reassigned. Use 'const' instead.","line":91,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":91,"endColumn":17,"fix":{"range":[2851,2912],"text":"const charRemain = charLimit - getValues(\"description\").length;"}},{"ruleId":"prefer-const","severity":2,"message":"'remainColor' is never reassigned. Use 'const' instead.","line":92,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":92,"endColumn":18,"fix":{"range":[2915,2971],"text":"const remainColor = charRemain <= 0 ? \"text-red-400\" : \"\";"}},{"ruleId":"prefer-const","severity":2,"message":"'statusBarBG' is never reassigned. Use 'const' instead.","line":95,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":95,"endColumn":18,"fix":{"range":[3019,3111],"text":"const statusBarBG = data ? \"bg-primary-dark\" : error ? \"bg-red-500\" : \"bg-transparent border\";"}},{"ruleId":"prefer-const","severity":2,"message":"'statusBarMsg' is never reassigned. Use 'const' instead.","line":96,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":96,"endColumn":19,"fix":{"range":[3114,3480],"text":"const statusBarMsg = match(data,\n    [\"create\", \"Team successfully created!\"],\n    [\"update\", \"Team successfully updated!\"],\n    [\"delete\", \"Team successfully deleted!\"]\n  ) || match(status,\n    [\"idle\", \"Use the form below to let people know about your team!\"],\n    [\"error\", \"An error occurred while updating, please try again.\"],\n    [\"loading\", \"Updating...\"]\n  );"}},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":168,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts"},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":169,"column":23,"nodeType":"JSXText","messageId":"unescapedEntityAlts"},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":169,"column":93,"nodeType":"JSXText","messageId":"unescapedEntityAlts"}],"errorCount":8,"warningCount":1,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Controller, NestedValue, useForm, useWatch } from \"react-hook-form\";\nimport classnames from \"classnames\";\nimport { useMutation, useQuery } from \"react-query\";\nimport { Button } from \"../../components/Button\";\nimport { isUserLoggedIn } from \"../../components/PageUserInfo\";\nimport { SkillsetSelector } from \"../../components/SkillsetSelector\";\nimport { createTeam, updateTeam, getTeam, deleteTeam, TeamDto } from \"../../utils/TeamActions\";\nimport { getSkillsets } from \"../../utils/Skillsets\";\nimport match from \"../../utils/match\";\n\nexport interface FormData {\n  description: string;\n  skillsets: NestedValue<number[]>;\n}\n\nconst charLimit = 240;\nconst defaultTeam = {description: \"\", skillsets: [] as number[]};\n\n// There's SURELY a better way of doing this, right?\nexport const Register: React.FC = () => {\n  const {data, isLoading} = useQuery(\"userTeam\", async () => {\n    return getTeam();\n  }, {\n    // has to be 0, otherwise when you leave and come back to Register the the cache isn't invalidated, and it shows the wrong thing\n    cacheTime: 0\n  });\n\n  if(isLoading) return null;\n  return (<RegisterForm userTeam={data!} />);\n}\n\nconst RegisterForm: React.FC<{userTeam: TeamDto | null}> = ({userTeam}) => {\n  const [userHasTeam, updateUserHasTeam] = React.useState(userTeam != null);\n\n  // sending data changes to server\n  const { status, data, mutate, error, isLoading } = useMutation(\n    async (formData: FormData | null) => {\n      // ensures a minimum of 200ms wait to ensure status bar transitions smoothly\n      let waitForBarAnim = new Promise(resolve => setTimeout(resolve, 200));\n\n      let rtn: string;\n\n      if(formData == null) {\n        await deleteTeam();\n        rtn = \"delete\";\n      } else {\n        if(userHasTeam){\n          await updateTeam(formData);\n          rtn = \"update\";\n        } else {\n          await createTeam(formData);\n          rtn = \"create\";\n        }\n      }\n      \n      await waitForBarAnim;\n      return rtn;\n    },\n    {\n      onSuccess: action => updateUserHasTeam(action != \"delete\")\n    }\n  );\n\n  // setting up the form\n  const { register, formState, handleSubmit, control, getValues } = useForm<FormData>({\n    criteriaMode: \"all\",\n    defaultValues: userTeam == null ? defaultTeam : {\n      description: userTeam.description,\n      skillsets: getSkillsets(userTeam.skillsetMask).map(s => s.id)\n    }\n  });\n\n  // validation\n  React.useEffect(() => {\n    register(\"skillsets\", {\n      validate: (value) => {\n        if(value.length === 0) return \"Required\";\n      },\n    });\n    register(\"description\", {\n      validate: (value) => {\n        if(value.length > charLimit) return \"The character limit is \"+charLimit;\n      },\n    });\n  }, [register]);\n\n\n  // Counts how many characters are left for the description\n  useWatch({control, name:\"description\"});\n  let charRemain = charLimit - getValues(\"description\").length;\n  let remainColor = charRemain <= 0 ? \"text-red-400\" : \"\";\n\n  // Configures the status bar's appearance\n  let statusBarBG = data ? \"bg-primary-dark\" : error ? \"bg-red-500\" : \"bg-transparent border\";\n  let statusBarMsg = match(data,\n    [\"create\", \"Team successfully created!\"],\n    [\"update\", \"Team successfully updated!\"],\n    [\"delete\", \"Team successfully deleted!\"]\n  ) || match(status,\n    [\"idle\", \"Use the form below to let people know about your team!\"],\n    [\"error\", \"An error occurred while updating, please try again.\"],\n    [\"loading\", \"Updating...\"]\n  );\n\n  return (<>\n    <div className={\"p-2 m-8 rounded text-center text-lg font-bold transition \"+statusBarBG}>{statusBarMsg}</div>\n    <form\n      className=\"mx-auto space-y-8\"\n      onSubmit={handleSubmit((data) => mutate(data))}\n    >\n      <div className=\"space-y-2\">\n        <label\n          className={classnames(\n            \"text-lg block\",\n            formState.errors.skillsets && \"text-red-400\"\n          )}\n        >\n          What skills do you need from new teammates?\n        </label>\n        <Controller\n          control={control}\n          name=\"skillsets\"\n          render={({ field: { value, onChange } }) => (\n            <SkillsetSelector selectedSkillsets={value} onChange={onChange} />\n          )}\n        />\n        {formState && formState.errors && formState.errors.skillsets && (\n          <div className=\"text-red-400\">\n            {formState.errors.skillsets.message}\n          </div>\n        )}\n      </div>\n      <div className=\"space-y-2\">\n        <label\n          className={classnames(\n            \"text-lg block\",\n            formState.errors.description && \"text-red-400\"\n          )}\n          htmlFor=\"description\"\n        >\n          Tell us a bit about yourself and the team you&rsquo;d like to see!<br/>\n          Characters Remaining: <span className={remainColor}>{charRemain}</span>\n        </label>\n        <textarea\n          style={{resize:\"none\"}}\n          className={classnames(\n            \"text-md bg-transparent border  px-4 py-2 block w-full placeholder-white placeholder-opacity-40 h-36\",\n            formState.errors.description\n              ? \"border-red-400 focus:border-red-500\"\n              : \"border-white focus:border-primary\"\n          )}\n          placeholder=\"This is my first jam, though I've made some small games before&#10;I like to do level design for platformers (like Celeste), and sometimes I code for Unity&#10;Ideally I want a team of 3 people - mostly I need an artist\"\n          id=\"description\"\n          {...register(\"description\", { required: \"Required\" })}\n        />\n        {formState.errors.description && (\n          <div className=\"text-red-400\">\n            {formState.errors.description.message}\n          </div>\n        )}\n        <div className=\"max-width-max text-white text-sm text-opacity-70 leading-relaxed\">\n          Don&rsquo;t forget to mention:\n          <ul className=\"list-disc pl-6\">\n            <li>Your game dev/jam experience</li>\n            <li>Your skills</li>\n            <li>The type of games you like to make, or an idea you have for your jam game</li>\n            <li>How big you want your team, and if there's anybody you <em>really</em> need</li>\n            <li>If you're looking for a coder, make sure to mention what engine/language you're using!</li>\n            <li>Anything else you&rsquo;d like a potential teammate to know!</li>\n          </ul>\n        </div>\n      </div>\n      <Button type=\"submit\" disabled={isLoading}>\n        {userHasTeam ? \"Update Team\" : \"Post Team\"}\n      </Button>\n      {userHasTeam ?\n        <Button onClick={() => mutate(null)} className={\"bg-red-500\"} disabled={isLoading}>\n          {\"Delete Team\"}\n        </Button>\n      : null}\n    </form>\n  </>);\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/utils/Skillsets.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/utils/TeamActions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[187,190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[187,190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'k' is never reassigned. Use 'const' instead.","line":11,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":11,"endColumn":12,"fix":{"range":[310,315],"text":"const k"}},{"ruleId":"prefer-const","severity":2,"message":"'v' is never reassigned. Use 'const' instead.","line":12,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":12,"endColumn":10,"fix":{"range":[337,360],"text":"const v = queryParams[k];"}},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":13,"column":20,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":13,"endColumn":34}],"errorCount":3,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import {FormData} from \"../pages/Register/Register\";\n\nexport interface TeamDto {\n  description: string;\n  skillsetMask: number;\n}\n\nexport const getAllTeams = (queryParams: Record<string, any>): Promise<Array<Record<string, unknown>>> => {\n  const url = new URL(`${import.meta.env.VITE_API_URL}/teams`);\n\n  for(let k in queryParams){\n    let v = queryParams[k];\n    if(queryParams.hasOwnProperty(k) && v != null && v != undefined)\n      url.searchParams.append(k, v.toString());\n  }\n\n  return fetch(url.toString(), {mode: \"cors\"}).then((res) => res.json());\n};\n\nexport const createTeam = async (formData: FormData): Promise<Response> => {\n  return makeApiRequest(\"/teams\", \"POST\", teamFromForm(formData));\n};\n\nexport const getTeam = async (): Promise<TeamDto | null> => {\n  return (await makeApiRequest(\"/teams/mine\", \"GET\")).json();\n};\n\nexport const updateTeam = async (formData: FormData): Promise<Response> => {\n  return makeApiRequest(\"/teams/mine\", \"PUT\", teamFromForm(formData));\n};\n\nexport const deleteTeam = async (): Promise<Response> => {\n  return makeApiRequest(\"/teams/mine\", \"DELETE\");\n};\n\n/**\n * Convert FormData to the format needed to create/update a Team record\n * @param formData\n */\nconst teamFromForm = (formData: FormData): TeamDto => {\n  return {\n    description: formData.description,\n    skillsetMask: formData.skillsets.reduce((a, b) => a + b, 0),\n  };\n};\n\n/**\n * Horrific general API request method\n * @param path\n * @param method\n * @param body\n */\nconst makeApiRequest = async (path: string, method: string, body: TeamDto | undefined = undefined) => {\n  const token = localStorage.getItem(\"token\");\n\n  const options = {\n    method: method,\n    mode: \"cors\",\n    headers: {\n      \"Authorization\": \"Bearer \" + token,\n      \"Content-Type\": \"application/json\",\n    }\n  };\n  \n  if (body) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    options['body'] = JSON.stringify(body);\n  }\n  \n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const res = await fetch(`${import.meta.env.VITE_API_URL}${path}`, options);\n  if(!res.ok) {\n    if(res.status == 401) window.location.replace(`${import.meta.env.VITE_API_URL}/oauth2/authorization/discord`);\n    else throw new Error(`${res.status} ${res.statusText}: ${await res.text()}`);\n  }\n  return res;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/utils/UserInfo.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/will/repos/team-finder-ui/src/utils/match.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'match' is never reassigned. Use 'const' instead.","line":2,"column":12,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":17,"fix":{"range":[91,107],"text":"const [match, rtn]"}},{"ruleId":"prefer-const","severity":2,"message":"'rtn' is never reassigned. Use 'const' instead.","line":2,"column":19,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":22,"fix":{"range":[91,107],"text":"const [match, rtn]"}}],"errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"export default function match<T, RT>(val:T, ...matches: [T, RT][]): RT | undefined {\n  for(let [match, rtn] of matches) if(val == match) return rtn;\n}","usedDeprecatedRules":[]}]