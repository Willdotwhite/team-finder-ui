[{"filePath":"/home/dallonf/devroot/team-finder-ui/src/Context.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/dallonf/devroot/team-finder-ui/src/Routes.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/dallonf/devroot/team-finder-ui/src/components/RoleSVG.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/dallonf/devroot/team-finder-ui/src/components/Team.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/dallonf/devroot/team-finder-ui/src/main.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/dallonf/devroot/team-finder-ui/src/pages/Home/Home.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedRoles' is defined but never used.","line":30,"column":57,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":70}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { TeamData, Team } from \"../../components/Team\"\nimport { RoleSVG } from \"../../components/RoleSVG\"\nimport { roles } from \"../../utils/Roles\";\n\n\ntype RFProps = {\n  roleState: [number[], React.Dispatch<React.SetStateAction<number[]>>]\n}\nconst RoleFilter: React.FC<RFProps> = ({roleState:[selected, setSelected]}) => {\n\n  const toggleSelected = (roleId: number) => {\n    if(selected.includes(roleId)) setSelected( selected.filter(id => id != roleId) );\n    else setSelected( [...selected, roleId] );\n  }\n\n  return <div className=\"flex justify-between my-10\">{\n    roles.map(r => {\n      const color = selected.includes(r.id) ? \"fill-primaryBright\" : \"fill-dimwhite hover:fill-white\";\n      return (<div key={r.id} onClick={() => toggleSelected(r.id)} className={\"text-center leading-tight align-top cursor-pointer w-21\"}>\n        <RoleSVG roleId={r.id} className={\"mb-2 p-2 border-2 rounded transition \"+color}/>\n        {r.name}\n      </div>)\n    })\n  }</div>\n}\n\n\nconst TeamList: React.FC<{selectedRoles: number[]}> = ({selectedRoles}) => {\n  // TODO: selectedRoles filter queries\n  // not implemented in back-end yet\n\n  const { isLoading, isError, data, refetch } = useQuery([\"Teams\"], async (): Promise<Array<TeamData>> => {\n    const arr: Array<Record<string, unknown>> = await fetch(\"http://178.62.53.195/teams\", {mode:\"cors\"}).then(res => res.json());\n    return arr.map(t => new TeamData(t));\n  });\n\n  return (<div>\n    <button onClick={() => refetch()} className=\"block bg-primary-dark my-6 p-2 focus:outline-none\">\n      Refetch Teams\n    </button>\n    \n    <div>{\n      isLoading ? \"Loading..\" : isError ? \"fuck\" :\n      data!.map(t => <Team key={t.id} team={t}/>)\n    }</div>\n  </div>)\n}\n\n\nexport const Home: React.FC = () => {\n  const roleState = useState<number[]>([]);\n\n  return (\n    <div className=\"container mx-auto px-2 max-w-screen-md\">\n      <h1 className=\"text-3xl text-primary font-light my-6\">\n        Find a team!\n      </h1>\n      <RoleFilter roleState={roleState}/>\n      <TeamList selectedRoles={roleState[0]} />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/dallonf/devroot/team-finder-ui/src/utils/Roles.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]